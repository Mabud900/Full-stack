const express = require('express');
const app = express();
const PORT = 3000;

// Middleware to parse JSON bodies
app.use(express.json());

// Middleware to log all requests for debugging
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// In-memory storage for playing cards
let cards = [
  {
    id: 1,
    suit: "Hearts",
    value: "Ace"
  },
  {
    id: 2,
    suit: "Spades",
    value: "King"
  },
  {
    id: 3,
    suit: "Diamonds",
    value: "Queen"
  }
];

// Counter for generating unique IDs
let nextId = 4;

// Root endpoint - Welcome message
app.get('/', (req, res) => {
  console.log('Root route hit!');
  res.status(200).json({
    message: "Welcome to the Playing Card Collection API!",
    endpoints: {
      "GET /cards": "Get all cards",
      "GET /cards/:id": "Get card by ID", 
      "POST /cards": "Add new card (requires: suit, value)",
      "PUT /cards/:id": "Update card by ID",
      "DELETE /cards/:id": "Delete card by ID"
    },
    example: "Try visiting: /cards"
  });
});

// GET /cards - Retrieve all cards
app.get('/cards', (req, res) => {
  console.log('Cards route hit!');
  res.status(200).json(cards);
});

// GET /cards/:id - Retrieve a specific card by ID
app.get('/cards/:id', (req, res) => {
  const cardId = parseInt(req.params.id);
  console.log(`Getting card with ID: ${cardId}`);
  const card = cards.find(c => c.id === cardId);
  
  if (!card) {
    return res.status(404).json({ message: 'Card not found' });
  }
  
  res.status(200).json(card);
});

// POST /cards - Add a new card
app.post('/cards', (req, res) => {
  const { suit, value } = req.body;
  console.log(`Adding new card: ${suit} ${value}`);
  
  // Validate required fields
  if (!suit || !value) {
    return res.status(400).json({ 
      message: 'Both suit and value are required' 
    });
  }
  
  // Create new card
  const newCard = {
    id: nextId++,
    suit: suit,
    value: value
  };
  
  // Add to cards array
  cards.push(newCard);
  
  // Return created card with 201 status
  res.status(201).json(newCard);
});

// DELETE /cards/:id - Delete a card by ID
app.delete('/cards/:id', (req, res) => {
  const cardId = parseInt(req.params.id);
  console.log(`Deleting card with ID: ${cardId}`);
  const cardIndex = cards.findIndex(c => c.id === cardId);
  
  if (cardIndex === -1) {
    return res.status(404).json({ message: 'Card not found' });
  }
  
  // Get the card before removing it
  const removedCard = cards[cardIndex];
  
  // Remove card from array
  cards.splice(cardIndex, 1);
  
  // Return success message with removed card info
  res.status(200).json({
    message: `Card with ID ${cardId} removed`,
    card: removedCard
  });
});

// PUT /cards/:id - Update a card by ID (bonus endpoint)
app.put('/cards/:id', (req, res) => {
  const cardId = parseInt(req.params.id);
  console.log(`Updating card with ID: ${cardId}`);
  const cardIndex = cards.findIndex(c => c.id === cardId);
  
  if (cardIndex === -1) {
    return res.status(404).json({ message: 'Card not found' });
  }
  
  const { suit, value } = req.body;
  
  // Validate required fields
  if (!suit || !value) {
    return res.status(400).json({ 
      message: 'Both suit and value are required' 
    });
  }
  
  // Update the card
  cards[cardIndex] = {
    id: cardId,
    suit: suit,
    value: value
  };
  
  res.status(200).json(cards[cardIndex]);
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error('Error occurred:', err.stack);
  res.status(500).json({ message: 'Something went wrong!' });
});

// Handle 404 for unknown routes
app.use((req, res) => {
  console.log(`404 - Route not found: ${req.method} ${req.path}`);
  res.status(404).json({ message: 'Route not found' });
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
  console.log('Available endpoints:');
  console.log('GET    /           - API documentation');
  console.log('GET    /cards      - Get all cards');
  console.log('GET    /cards/:id  - Get card by ID');
  console.log('POST   /cards      - Add new card');
  console.log('PUT    /cards/:id  - Update card by ID');
  console.log('DELETE /cards/:id  - Delete card by ID');
});

module.exports = app;
